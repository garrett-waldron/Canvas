<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <style>
        canvas {
            border: 1px solid #d3d3d3;
            display: block;
            background-image: url(galaxy.jpg);
            background-size: cover;
        }
    </style>
</head>
<body>
    <button id="PlayButton">Play Game</button>
    <button id="PauseButton">Pause</button>
    <button id="RestartButton" style="display:none;">Restart</button>

    <p>Use the arrow keys to stay in the air</p>
    <p>How long can you stay alive?</p>

    <script>
        
        let speedFactor = 20;
        let obstacleSpeed = 1;
        let myGamePiece;
        let myObstacles = [];
        let myScore;
        let myEnemies = [];
        const jumpSound = new Audio('jump.mp3');
        const collideSound = new Audio('Collide.mp3');

        const myGameArea = {
            canvas: document.createElement("canvas"),
            start: function() {
                this.canvas.width = window.innerWidth * 0.8; // Responsive width
                this.canvas.height = 270;
                document.body.appendChild(this.canvas);
                this.context = this.canvas.getContext("2d");
                this.frameNo = 0;
            },
            clear: function() {
                this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
            }
        };

        function startGame() {
            myGamePiece = new gameObject(30, 30, "blue", 10, 120);
            myGamePiece.image = new Image();
            myGamePiece.image.src = 'SpaceShip.png';
            myEnemies.image = new Image();
            myEnemies.image.src = 'enemy.jpg';

            myScore = new gameObject("30px", "Consolas", "white", 280, 40, "text");
            myObstacles = [];
            myGameArea.start();
            playGame();

            window.addEventListener('keydown', function(e) {
                switch (e.key) {
                    case 'ArrowUp':
                        accelerate(-0.05);
                        break;
                    case 'ArrowDown':
                        accelerate(0.05);
                        break;
                }
            });

            document.getElementById('RestartButton').style.display = 'none';
        }

        function gameObject(width, height, color, x, y, type) {
            this.type = type;
            this.width = width;
            this.height = height;
            this.x = x;
            this.y = y;
            this.gravity = 0;
            this.gravitySpeed = 0;
            this.text = "";
            this.update = function() {
                const ctx = myGameArea.context;
                if (this.type == "text") {
                    ctx.font = this.width + " " + this.height;
                    ctx.fillStyle = color;
                    ctx.fillText(this.text, this.x, this.y);
                } else if (this.image) {
                    ctx.drawImage(this.image, this.x, this.y, this.width, this.height);
                } else {
                    ctx.fillStyle = color;
                    ctx.fillRect(this.x, this.y, this.width, this.height);
                }
            };
            this.newPos = function() {
                this.gravitySpeed += this.gravity;
                this.y += this.gravitySpeed;
                this.hitBottom();
            };
            this.hitBottom = function() {
                const rockbottom = myGameArea.canvas.height - this.height;
                if (this.y > rockbottom) {
                    this.y = rockbottom;
                    this.gravitySpeed = 0;
                }
            };
            this.crashWith = function(otherobj) {
                const myleft = this.x;
                const myright = this.x + this.width;
                const mytop = this.y;
                const mybottom = this.y + this.height;
                const otherleft = otherobj.x;
                const otherright = otherobj.x + otherobj.width;
                const othertop = otherobj.y;
                const otherbottom = otherobj.y + otherobj.height;
                return !(mybottom < othertop || mytop > otherbottom || myright < otherleft || myleft > otherright);
            };
        }
        function Enemy(width,height,x,y){
            gameObject.call(this,width,height, "red", x,y);
            this.speedX = -2;

            this.update = function(){
                const ctx = myGameArea.context;
                ctx.fillStyle = "red";
                ctx.fillRect(this.x,this.y,this.width,this.height);
            }

            this.newPos = function() {
                this.x += this.speedX;
            }
        }
        function updateGameArea() {
            myGameArea.clear();
            myGameArea.frameNo += 1;

            if(myGameArea.frameNo > 1000 && speedFactor > 10){
                speedFactor -=1;
                clearInterval(myGameArea.interval);
                myGameArea.interval = setInterval(updateGameArea,speedFactor);
            }

            for (let i = 0; i < myObstacles.length; i++) {
                if (myGamePiece.crashWith(myObstacles[i])) {
                    collideSound.play();
                    alert("You lose! Your score: " + myGameArea.frameNo);
                    clearInterval(myGameArea.interval); 
                    document.getElementById('RestartButton').style.display = 'block'; // Show restart button
                    return;
                }
            }
            for (let i = 0; i < myEnemies.length; i++) {
                if (myGamePiece.crashWith(myEnemies[i])) {
                    collideSound.play();
                    alert("You hit an enemy! Your score: " + myGameArea.frameNo);
                    clearInterval(myGameArea.interval); 
                    document.getElementById('RestartButton').style.display = 'block';
                    return;
                }
            }

            if (myGameArea.frameNo == 1 || everyinterval(150)) {
                let x = myGameArea.canvas.width;
                let height = Math.floor(Math.random() * 200) + 20;
                let gap = Math.floor(Math.random() * 150) + 50;

                let obstacle1 = new gameObject(10, height, "green", x, 0);
                let obstacle2 = new gameObject(10, myGameArea.canvas.height - height - gap, "green", x, height + gap);
                myObstacles.push(obstacle1);
                myObstacles.push(obstacle2);
            }

            if(myGameArea.frameNo % 100 === 0){
                let enemy = new Enemy(15,15,myGameArea.canvas.width, Math.random() *(myGameArea.canvas.height - 30));
                myEnemies.push(enemy);
            }

            for (let i = 0; i < myObstacles.length; i++) {
                myObstacles[i].x += -1;
                myObstacles[i].update();
            }

            for( let i =0; i <myEnemies.length; i++){
                myEnemies[i].newPos();
                myEnemies[i].update();
            }

            myScore.text = "SCORE: " + myGameArea.frameNo;
            myScore.update();
            myGamePiece.newPos();
            myGamePiece.update();
        }
        
        function everyinterval(n) {
            return (myGameArea.frameNo / n) % 1 === 0;
        }

        function accelerate(n) {
            myGamePiece.gravity = n;
            if (n < 0) jumpSound.play();
        }
        let paused = false;
        document.getElementById('PlayButton').addEventListener('click', startGame);
        document.getElementById('PauseButton').addEventListener('click', function() {
            if (paused) {
                playGame();
                this.textContent = "Pause";

            } else {
                Pause();
                this.textContent = "Unpause"
            }
            paused = !paused;
        });

        document.getElementById('RestartButton').addEventListener('click', function() {
            myGameArea.clear();
            myGameArea.frameNo = 0;
            myObstacles = [];
            myEnemies = [];
            speedFactor = 20;
            startGame(); // Restart the game
        });

        function Pause() {
            clearInterval(myGameArea.interval);
        }

        function playGame() {
            if (!myGameArea.interval) {
            myGameArea.interval = setInterval(updateGameArea,speedFactor);
        }
        }
    </script>
</body>
</html>
        
