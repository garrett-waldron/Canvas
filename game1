<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <style>
        canvas {
            border: 1px solid #d3d3d3;
            display: block;
            background-image: url(galaxy.jpg);
            background-size: cover;
        }
    </style>
</head>
<body>
    <button id="PlayButton">Play Game</button>
    <button id="PauseButton">Pause</button>
    <button id="RestartButton" style="display:none;">Restart</button>
    <p>Use the arrow keys to stay in the air</p>
    <p>How long can you stay alive?</p>

    <script>
        const backgroundMusic = new Audio('background.mp3');
        backgroundMusic.volume = 0.5;
        let speedFactor = 20;
        let paused = false;
        let myGamePiece;
        let myObstacles = [];
        let myScore;
        let myEnemies = [];
        const keys = {}; // Global keys object

        const myGameArea = {
            canvas: document.createElement("canvas"),
            start: function() {
                this.canvas.width = window.innerWidth * 0.8; // Responsive width
                this.canvas.height = 270;
                document.body.appendChild(this.canvas);
                this.context = this.canvas.getContext("2d");
                this.frameNo = 0;
            },
            clear: function() {
                this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
            }
        };

        function startGame() {
            myGamePiece = new gameObject(30, 30, "blue", 10, 120);
            myGamePiece.image = new Image();
            myGamePiece.image.src = 'SpaceShip.png';
            myScore = new gameObject("30px", "Consolas", "white", 280, 40, "text");
            myObstacles = [];
            myEnemies = [];
            myGameArea.start();
            playGame();
            playMusic();

            window.addEventListener('keydown', (event) => {
                keys[event.key] = true;
            });
            window.addEventListener('keyup', (event) => {
                keys[event.key] = false;
            });

            document.getElementById('RestartButton').style.display = 'none';
        }

        function updateGameArea() {
            myGameArea.clear();
            myGameArea.frameNo += 1;

            // Move the game piece based on key presses
            if (keys['ArrowRight']) myGamePiece.x += 2;
            if (keys['ArrowLeft']) myGamePiece.x -= 2; 
            if (keys['ArrowUp']) myGamePiece.y -= 2; 
            if (keys['ArrowDown']) myGamePiece.y += 2;

            // Keep within canvas bounds
            myGamePiece.x = Math.max(0, Math.min(myGameArea.canvas.width - myGamePiece.width, myGamePiece.x));
            myGamePiece.y = Math.max(0, Math.min(myGameArea.canvas.height - myGamePiece.height, myGamePiece.y));

            // Generate obstacles and enemies
            if (myGameArea.frameNo == 1 || everyinterval(150)) {
                let x = myGameArea.canvas.width;
                let height = Math.floor(Math.random() * 200) + 20;
                let gap = Math.floor(Math.random() * 150) + 50;

                let obstacle1 = new gameObject(10, height, "green", x, 0);
                let obstacle2 = new gameObject(10, myGameArea.canvas.height - height - gap, "green", x, height + gap);
                myObstacles.push(obstacle1);
                myObstacles.push(obstacle2);
            }

            if (myGameArea.frameNo % 100 === 0) {
                let enemy = new gameObject(15, 15, "red", myGameArea.canvas.width, Math.random() * (myGameArea.canvas.height - 30));
                myEnemies.push(enemy);
            }

            // Update and draw obstacles
            for (let i = 0; i < myObstacles.length; i++) {
                myObstacles[i].x -= 1; // Move obstacles left
                myObstacles[i].update();
            }

            // Update and draw enemies
            for (let i = 0; i < myEnemies.length; i++) {
                myEnemies[i].x -= 2; // Move enemies left
                myEnemies[i].update();
            }

            // Check collisions
            for (let i = 0; i < myObstacles.length; i++) {
                if (myGamePiece.crashWith(myObstacles[i])) {
                    alert("You hit an obstacle! Your score: " + myGameArea.frameNo);
                    clearInterval(myGameArea.interval); 
                    document.getElementById('RestartButton').style.display = 'block'; 
                    return;
                }
            }
            for (let i = 0; i < myEnemies.length; i++) {
                if (myGamePiece.crashWith(myEnemies[i])) {
                    alert("You hit an enemy! Your score: " + myGameArea.frameNo);
                    clearInterval(myGameArea.interval); 
                    document.getElementById('RestartButton').style.display = 'block';
                    return;
                }
            }

            // Update score and draw game piece
            myScore.text = "SCORE: " + myGameArea.frameNo;
            myScore.update();
            myGamePiece.update();
        }

        function gameObject(width, height, color, x, y, type) {
            this.type = type;
            this.width = width;
            this.height = height;
            this.x = x;
            this.y = y;
            this.update = function() {
                const ctx = myGameArea.context;
                ctx.fillStyle = color;
                ctx.fillRect(this.x, this.y, this.width, this.height);
            };
            this.crashWith = function(otherobj) {
                const myleft = this.x;
                const myright = this.x + this.width;
                const mytop = this.y;
                const mybottom = this.y + this.height;
                const otherleft = otherobj.x;
                const otherright = otherobj.x + otherobj.width;
                const othertop = otherobj.y;
                const otherbottom = otherobj.y + otherobj.height;
                return !(mybottom < othertop || mytop > otherbottom || myright < otherleft || myleft > otherright);
            };
        }

        function everyinterval(n) {
            return (myGameArea.frameNo / n) % 1 === 0;
        }

        function playMusic() {
            backgroundMusic.loop = true;
            backgroundMusic.play();
        }
       
        function stopMusic() {
            backgroundMusic.pause();
            backgroundMusic.currentTime = 0;
        }

        document.getElementById('PlayButton').addEventListener('click', startGame);
       
        document.getElementById('PauseButton').addEventListener('click', function() {
            if (paused) {
                playGame();
                this.textContent = "Pause";
            } else {
                Pause();
                this.textContent = "Unpause";
            }
            paused = !paused;
        });

        document.getElementById('RestartButton').addEventListener('click', function() {
            myGameArea.clear();
            myGameArea.frameNo = 0;
            myObstacles = [];
            myEnemies = [];
            speedFactor = 20;
            startGame();
        });

        function Pause() {
            clearInterval(myGameArea.interval);
        }

        function playGame() {
            if (!myGameArea.interval) {
                myGameArea.interval = setInterval(updateGameArea, speedFactor);
            }
        }
    </script>
</body>
</html>
